#include <stdio.h> 
#include <stdlib.h>
#include <string.h>
#include <memory.h>

#include "PCIE.h"

//MAX BUFFER FOR DMA
#define MAXDMA 20

//BASE ADDRESS FOR CONTROL REGISTER
#define CRA 0x00000000

//BASE ADDRESS TO SDRAM
#define SDRAM 0x08000000

#define RWSIZE (32 / 8)


void test16( PCIE_HANDLE hPCIe, DWORD addr );
void testDMA( PCIE_HANDLE hPCIe, DWORD addr);
void start(PCIE_HANDLE hPCIe, char *filename);
BOOL WriteStartByte(PCIE_HANDLE hPCIe);
BOOL clearMem(PCIE_HANDLE hPCIe);
BOOL checkSampleDone(PCIE_HANDLE hPCIe);
BOOL writeSamples(hPCIe, char * filename, &info);
BOOL readSamples(PCIE_HANDLE hPCIe);

int main( int argc, char *argv[])
{
	if(argc != 3 && argc != 2)
	{
	 	printf("Wrong command. Use **./app -h** for help.\n");
	 	return 0;
	 }
	
	void *lib_handle;
	PCIE_HANDLE hPCIe;

	lib_handle = PCIE_Load();
	if (!lib_handle)
	{
		printf("PCIE_Load failed\n");
		return 0;
	}
	hPCIe = PCIE_Open(0,0,0);

	if (!hPCIe)
	{
		printf("PCIE_Open failed\n");
		return 0;
	}
	
	char* input = argv[1];
	if (strcmp("-d",input)==0)
	{
		start(hPCIe, argv[2]);
	}
	else if(strcmp("-h",input)==0)
	{
		printf("Use **./app -d <textname>** to start demo.\n");	
	}
	else {
		printf("Wrong command. Use **./app -h** for help.\n");
	}

	return 0;
}

BOOL writeSamples(PCIE_HANDLE hPCIe,  char *filename, BITMAPINFOHEADER *info)
{
	FILE * pFile;
 	pFile = fopen(filename,"rb");
	fread(info, sizeof(DWORD)*255,1,pFile);
	
	DWORD addr = 0x08000000;  //original image written starting from 0x08000000
	// Write only one pixel to the LSByte and zero pad the rest 24 bits
	unsigned char *sampleBuffer;
	sampleBuffer = (unsigned char*)malloc((unsigned char)*2*255);
	int index = 0;
	int i;
	for (i = 0; i <255; ++i)
	{
		imageDataBuffer[index++] = sampleBuffer[i];
	}
	
    BOOL bPass = PCIE_DmaWrite(hPCIe, addr, imageDataBuffer, 255*4);
	if(!bPass)
	{
		printf("ERROR: unsuccessful image writing.\n");
		return FALSE;
	}
	else
		printf("Image written.\n");

	free(sampleBuffer);
	return TRUE;
}
BOOL WriteStartByte(PCIE_HANDLE hPCIe)
{
	DWORD addr = 0x00000000;
	unsigned char start = 0xffff;

	BOOL bPass = PCIE_Write32( hPCIe, pcie_bars[0], addr, start);
	if(!bPass)
	{
		printf("ERROR: unsuccessful start byte writing.\n");
		return FALSE;
	}
	else
		printf("Start byte written.\n");
	return TRUE;
}
void start(PCIE_HANDLE hPCIe, char *filename)
{

	BITMAPINF`OHEADER info;

	printf("\n\n");

	if(!WriteSamples(hPCIe, filename, &info))
		return; //dancing.bmp

	if(!WriteStartByte(hPCIe))
		return;

	//printf("\nNow press **KEY1** on board to start processing.\n");
	while(!checkSampleDone(hPCIe));
	printf("\nProcessing finished.\n");
	if(!readSamples(hPCIe))
		return; //dancing.bmp
	if(!clearMem(hPCIe, &info))
		return;
	return;
}
BOOL readSamples(PCIE_HANDLE hPCIe){
//function to read the sdram to a file
}
BOOL clearMem(PCIE_HANDLE hPCIe)
{
//function to clear the sdram
}

test16( PCIE_HANDLE hPCIe, DWORD addr )
{
	BOOL bPass;
	DWORD testVal = 0xf;
	DWORD readVal;

	WORD i = 0;
	for (i = 0; i < 16 ; i++ )
	{
		printf("Testing register %d at addr %x with value %x\n", i, addr, testVal);
		bPass = PCIE_Write16( hPCIe, pcie_bars[0], addr, testVal);
		if (!bPass)
		{
			printf("test FAILED: write did not return success\n");
			return;
		}
		bPass = PCIE_Read16( hPCIe, pcie_bars[0], addr, &readVal);
		if (!bPass)
		{
			printf("test FAILED: read did not return success\n");
			return;
		}
		if (testVal == readVal)
		{
			printf("Test PASSED: expected %x, received %x\n", testVal, readVal);
		}
		else
		{
			printf("Test FAILED: expected %x, received %x\n", testVal, readVal);
		}
		testVal = testVal + 1;
		addr = addr + 2;
	}
	return;
}
BOOL checkSampleDone(PCIE_HANDLE hPCIe)
{
   BYTE b;
   DWORD addr = 0x000002ff;
   BOOL bPass = PCIE_Read8( hPCIe, pcie_bars[0], addr, &b);
   BYTE check = 0x42;
   if(bPass)
   {
      if(b == check)
      {
      	//printf("Image done\n");
		return TRUE;
      }
      else
      {
      	//printf("Image not done yet\n");
      	return FALSE;
      }
   }
   return FALSE;
}
